{"version":3,"file":"main.757c0779246911bc04d9.bundle.js","sources":["webpack:///./src/components/Select/Select.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nimport Button from \"../Button/Button\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { shadow } from \"../common\";\r\nimport { blockSizes, fontSizes, padding } from \"../common/system\";\r\nimport Cutout from \"../Cutout/Cutout\";\r\n\r\nconst StyledSelectWrapper = styled(Cutout)`\r\n  height: ${blockSizes.md};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background: ${({ theme }) => theme.canvas};\r\n  color: ${({ theme }) => theme.inputText};\r\n  font-size: ${fontSizes.md};\r\n`;\r\nconst StyledSelectContent = styled.div`\r\n  width: 100%;\r\n  padding-left: ${padding.sm};\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n`;\r\nconst StyledDropdownButton = styled(Button)`\r\n  height: 100%;\r\n  width: 30px;\r\n  padding: 0;\r\n  z-index: 1;\r\n  flex-shrink: 0;\r\n  border-left-color: ${({ theme }) => theme.borderLight};\r\n  border-top-color: ${({ theme }) => theme.borderLight};\r\n  box-shadow: inset 1px 1px 0px 1px ${({ theme }) => theme.borderLightest},\r\n    inset -1px -1px 0 1px ${({ theme }) => theme.borderDark};\r\n`;\r\nconst StyledDropdownIcon = styled.span`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 0px;\r\n  height: 0px;\r\n  border-left: 6px solid transparent;\r\n  border-right: 6px solid transparent;\r\n  display: inline-block;\r\n  border-top: 6px solid ${({ theme }) => theme.text};\r\n  ${StyledDropdownButton}:active & {\r\n    margin-top: 2px;\r\n  }\r\n`;\r\n\r\nconst StyledDropdownList = styled.ul`\r\n  box-sizing: border-box;\r\n\r\n  font-size: ${fontSizes.md};\r\n  position: absolute;\r\n  bottom: -2px;\r\n  width: calc(100% - 2px);\r\n  transform: translateY(100%);\r\n  left: 0px;\r\n  background: ${({ theme }) => theme.canvas};\r\n  border: 2px solid ${({ theme }) => theme.borderDarkest};\r\n  border-top: none;\r\n  box-shadow: ${props => (props.shadow ? shadow : \"none\")};\r\n  cursor: default;\r\n  z-index: 99;\r\n`;\r\nconst StyledDropdownListItem = styled.li`\r\n  box-sizing: border-box;\r\n\r\n  width: 100%;\r\n  padding-left: ${padding.sm};\r\n\r\n  height: calc(${blockSizes.md} - 4px);\r\n  line-height: calc(${blockSizes.md} - 4px);\r\n  font-size: ${fontSizes.md};\r\n  white-space: nowrap;\r\n  color: ${({ theme }) => theme.inputText};\r\n  &:hover {\r\n    background: ${({ theme }) => theme.hoverBackground};\r\n    color: ${({ theme }) => theme.inputTextInvert};\r\n  }\r\n`;\r\nconst Select = ({\r\n  items,\r\n  selectedIndex,\r\n  shadow,\r\n  width,\r\n  height,\r\n  otherProps,\r\n  className,\r\n  onChange,\r\n  style\r\n}) => {\r\n  const [index, setIndex] = useState(selectedIndex);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleSelect = i => {\r\n    if (onChange) onChange(items[i].value);\r\n    setIndex(i);\r\n  };\r\n  return (\r\n    <StyledSelectWrapper\r\n      className={className}\r\n      onClick={() => setOpen(!open)}\r\n      style={{ ...style, width }}\r\n      shadow={shadow}\r\n      {...otherProps}\r\n    >\r\n      <StyledSelectContent>\r\n        {items.length ? items[index].label : \"\"}\r\n      </StyledSelectContent>\r\n      <StyledDropdownButton>\r\n        <StyledDropdownIcon />\r\n      </StyledDropdownButton>\r\n      {open && (\r\n        <StyledDropdownList\r\n          shadow={shadow}\r\n          style={height && { overflowY: \"scroll\", height }}\r\n        >\r\n          {items.map((item, i) => (\r\n            <StyledDropdownListItem\r\n              key={i}\r\n              onClick={e => {\r\n                handleSelect(i);\r\n              }}\r\n            >\r\n              {item.label}\r\n            </StyledDropdownListItem>\r\n          ))}\r\n        </StyledDropdownList>\r\n      )}\r\n    </StyledSelectWrapper>\r\n  );\r\n};\r\n\r\nSelect.propTypes = {\r\n  items: propTypes.arrayOf(propTypes.object).isRequired,\r\n  className: propTypes.string,\r\n  width: propTypes.number,\r\n  height: propTypes.number,\r\n  selectedIndex: propTypes.number,\r\n  shadow: propTypes.bool,\r\n  style: propTypes.object,\r\n  onChange: propTypes.func\r\n};\r\nSelect.defaultProps = {\r\n  style: {},\r\n  shadow: true,\r\n  selectedIndex: 0\r\n};\r\nexport default Select;\r\n"],"mappings":"AAUA","sourceRoot":""}